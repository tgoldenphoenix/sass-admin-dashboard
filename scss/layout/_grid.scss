@use "../abstracts/variables" as *;
@use "../abstracts/mixins" as *;
@use "breakpoints" as *;

/* ******************* LAYOUT AND GRID ****************** */
// any element whose class contains `e-container-` like
// `class="e-container-sm"`
// `class="some-class e-container-md more-class"`
.e-container,
[class*="e-container-"] {
  width: var(--container-default);// 90%
  margin: 0 auto;
}

// Creating various containers based on screen sizes
@each $size, $value in $containers {
  .e-container-#{$size} {
    @include respond(#{$size}) {
      max-width: $value;
    }
  }
}

// Row and columns
.e-row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$default-gutter;//negative of default-gutter
  margin-right: -$default-gutter;

  // `>` is the child combinator, select:
  // any direct child of the current element that has a class containing `e-flex-`
  > [class*="e-flex-"] {
    width: 100%;
    max-width: 100%;
    padding-right: $default-gutter;
    padding-left: $default-gutter;
  }

  // .e-row .e-flex {} descendant selector
  // targets all `flex` elements that are nested anywhere inside `row` elements
  @for $i from 1 through $total-cols {
    .e-flex-#{$i} {
      @include grid($total-cols, $i);
    }
  }

  @each $break, $value in $containers {
    @include respond(#{$break}) {
      @for $i from 1 through $total-cols {
        .e-flex-#{$break}-#{$i} {
          @include grid($total-cols, $i);
        }
      }
    }
  }
}

// Offset columns - Non-responsive
@include offset-grid($total-cols, false);
// Offset columns - Responsive
@include offset-grid($total-cols, true);